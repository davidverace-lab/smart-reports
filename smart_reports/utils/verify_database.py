"""
Script de verificaci√≥n de estructura de base de datos
Verifica que las tablas existan y contengan datos
"""

import sys
import os

# Agregar el directorio ra√≠z al path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

from smart_reports.database.connection import DatabaseConnection


def verificar_estructura_bd():
    """Verifica que la estructura de la BD sea correcta"""
    print("=" * 70)
    print("VERIFICACI√ìN DE ESTRUCTURA DE BASE DE DATOS")
    print("=" * 70)

    db = DatabaseConnection()

    if not db.connect():
        print("\n‚ùå ERROR: No se pudo conectar a la base de datos")
        print("Verifica la configuraci√≥n en database/connection.py")
        return False

    cursor = db.get_cursor()
    if not cursor:
        print("\n‚ùå ERROR: No se pudo obtener cursor")
        return False

    print("\n‚úÖ Conexi√≥n exitosa a la base de datos\n")

    # Tablas a verificar
    tablas_requeridas = [
        'Instituto_Usuario',
        'Instituto_UnidadDeNegocio',
        'Instituto_Modulo',
        'Instituto_ProgresoModulo'
    ]

    resultados = {}

    for tabla in tablas_requeridas:
        print(f"\n{'‚îÄ' * 70}")
        print(f"üìä TABLA: {tabla}")
        print('‚îÄ' * 70)

        try:
            # Contar registros
            cursor.execute(f"SELECT COUNT(*) FROM {tabla}")
            count = cursor.fetchone()[0]
            resultados[tabla] = count

            if count > 0:
                print(f"‚úÖ Registros encontrados: {count:,}")

                # Mostrar primeros 3 registros
                cursor.execute(f"SELECT TOP 3 * FROM {tabla}")
                rows = cursor.fetchall()

                if rows and cursor.description:
                    # Obtener nombres de columnas
                    columnas = [desc[0] for desc in cursor.description]
                    print(f"\nüìã Columnas ({len(columnas)}): {', '.join(columnas[:5])}...")

                    print("\nüîç Muestra de datos (primeros 3 registros):")
                    for idx, row in enumerate(rows, 1):
                        print(f"  Registro {idx}: {str(row)[:100]}...")
            else:
                print(f"‚ö†Ô∏è  Tabla existe pero est√° VAC√çA (0 registros)")

        except Exception as e:
            print(f"‚ùå ERROR al consultar tabla: {e}")
            resultados[tabla] = None

    # Resumen final
    print("\n" + "=" * 70)
    print("RESUMEN DE VERIFICACI√ìN")
    print("=" * 70)

    total_registros = 0
    tablas_con_datos = 0
    tablas_vacias = 0
    tablas_error = 0

    for tabla, count in resultados.items():
        if count is None:
            estado = "‚ùå ERROR"
            tablas_error += 1
        elif count > 0:
            estado = f"‚úÖ {count:,} registros"
            total_registros += count
            tablas_con_datos += 1
        else:
            estado = "‚ö†Ô∏è  VAC√çA"
            tablas_vacias += 1

        print(f"  {tabla:35} {estado}")

    print(f"\nüìä Estad√≠sticas:")
    print(f"  ‚Ä¢ Tablas con datos: {tablas_con_datos}/{len(tablas_requeridas)}")
    print(f"  ‚Ä¢ Tablas vac√≠as: {tablas_vacias}")
    print(f"  ‚Ä¢ Tablas con error: {tablas_error}")
    print(f"  ‚Ä¢ Total de registros: {total_registros:,}")

    # Verificar relaciones
    if resultados.get('Instituto_Usuario', 0) > 0 and resultados.get('Instituto_UnidadDeNegocio', 0) > 0:
        print("\n" + "‚îÄ" * 70)
        print("üîó VERIFICACI√ìN DE RELACIONES")
        print("‚îÄ" * 70)

        try:
            # Usuarios por unidad
            cursor.execute("""
                SELECT
                    un.NombreUnidad,
                    COUNT(u.UserId) as TotalUsuarios
                FROM Instituto_UnidadDeNegocio un
                LEFT JOIN Instituto_Usuario u ON un.IdUnidad = u.IdUnidadDeNegocio
                GROUP BY un.NombreUnidad
                ORDER BY TotalUsuarios DESC
            """)

            print("\nüìä Usuarios por Unidad de Negocio:")
            for row in cursor.fetchall():
                unidad, total = row
                print(f"  ‚Ä¢ {unidad:20} {total:4} usuarios")

        except Exception as e:
            print(f"‚ùå Error verificando relaciones: {e}")

    # Verificar progreso si hay datos
    if resultados.get('Instituto_ProgresoModulo', 0) > 0:
        try:
            cursor.execute("""
                SELECT
                    EstatusModuloUsuario,
                    COUNT(*) as Total
                FROM Instituto_ProgresoModulo
                GROUP BY EstatusModuloUsuario
            """)

            print("\nüìà Distribuci√≥n de Progreso:")
            for row in cursor.fetchall():
                estatus, total = row
                print(f"  ‚Ä¢ {estatus:20} {total:4} registros")

        except Exception as e:
            print(f"‚ùå Error verificando progreso: {e}")

    db.disconnect()

    print("\n" + "=" * 70)

    if tablas_vacias > 0 or tablas_error > 0:
        print("\n‚ö†Ô∏è  ADVERTENCIA: Se encontraron tablas vac√≠as o con errores")
        print("Recomendaci√≥n: Ejecutar script de inserci√≥n de datos de prueba")
        return False
    else:
        print("\n‚úÖ VERIFICACI√ìN EXITOSA: Todas las tablas tienen datos")
        return True


def generar_script_datos_prueba():
    """Genera script SQL para insertar datos de prueba"""
    script = """
-- =====================================================
-- SCRIPT DE DATOS DE PRUEBA PARA SMART REPORTS
-- =====================================================

-- 1. Insertar Unidades de Negocio
INSERT INTO Instituto_UnidadDeNegocio (NombreUnidad) VALUES
('CCI'),
('SANCHEZ'),
('DENNIS'),
('HPMX');

-- 2. Insertar M√≥dulos
INSERT INTO Instituto_Modulo (NombreModulo, Activo) VALUES
('Inducci√≥n General', 1),
('Seguridad Industrial', 1),
('Operaciones Portuarias', 1),
('Gesti√≥n de Calidad', 1),
('Liderazgo', 1),
('Comunicaci√≥n Efectiva', 1),
('Trabajo en Equipo', 1),
('Resoluci√≥n de Conflictos', 0),
('Manejo de Equipos', 1),
('Protocolos de Emergencia', 1),
('Atenci√≥n al Cliente', 1),
('Excel Avanzado', 1),
('Power BI', 0),
('Ingl√©s T√©cnico', 1);

-- 3. Insertar Usuarios de Ejemplo (10 usuarios distribuidos en las unidades)
DECLARE @IdCCI INT, @IdSANCHEZ INT, @IdDENNIS INT, @IdHPMX INT;

SELECT @IdCCI = IdUnidad FROM Instituto_UnidadDeNegocio WHERE NombreUnidad = 'CCI';
SELECT @IdSANCHEZ = IdUnidad FROM Instituto_UnidadDeNegocio WHERE NombreUnidad = 'SANCHEZ';
SELECT @IdDENNIS = IdUnidad FROM Instituto_UnidadDeNegocio WHERE NombreUnidad = 'DENNIS';
SELECT @IdHPMX = IdUnidad FROM Instituto_UnidadDeNegocio WHERE NombreUnidad = 'HPMX';

INSERT INTO Instituto_Usuario (Nombre, Email, IdUnidadDeNegocio, Division) VALUES
('Juan P√©rez', 'juan.perez@hutchison.com', @IdCCI, 'Operaciones'),
('Mar√≠a Gonz√°lez', 'maria.gonzalez@hutchison.com', @IdCCI, 'Administraci√≥n'),
('Carlos L√≥pez', 'carlos.lopez@hutchison.com', @IdSANCHEZ, 'Log√≠stica'),
('Ana Mart√≠nez', 'ana.martinez@hutchison.com', @IdSANCHEZ, 'Operaciones'),
('Roberto Silva', 'roberto.silva@hutchison.com', @IdDENNIS, 'Operaciones'),
('Laura Torres', 'laura.torres@hutchison.com', @IdDENNIS, 'Recursos Humanos'),
('Miguel Ram√≠rez', 'miguel.ramirez@hutchison.com', @IdHPMX, 'Operaciones'),
('Carmen Flores', 'carmen.flores@hutchison.com', @IdHPMX, 'Calidad'),
('Jorge Hern√°ndez', 'jorge.hernandez@hutchison.com', @IdCCI, 'Seguridad'),
('Patricia Ruiz', 'patricia.ruiz@hutchison.com', @IdSANCHEZ, 'Administraci√≥n');

-- 4. Insertar Progreso de M√≥dulos (datos variados)
DECLARE @UserId1 INT, @UserId2 INT, @UserId3 INT;
DECLARE @ModId1 INT, @ModId2 INT, @ModId3 INT, @ModId4 INT;

SELECT TOP 1 @UserId1 = UserId FROM Instituto_Usuario ORDER BY UserId;
SELECT TOP 1 @UserId2 = UserId FROM Instituto_Usuario WHERE Email LIKE '%maria%';
SELECT TOP 1 @UserId3 = UserId FROM Instituto_Usuario WHERE Email LIKE '%carlos%';

SELECT @ModId1 = IdModulo FROM Instituto_Modulo WHERE NombreModulo = 'Inducci√≥n General';
SELECT @ModId2 = IdModulo FROM Instituto_Modulo WHERE NombreModulo = 'Seguridad Industrial';
SELECT @ModId3 = IdModulo FROM Instituto_Modulo WHERE NombreModulo = 'Operaciones Portuarias';
SELECT @ModId4 = IdModulo FROM Instituto_Modulo WHERE NombreModulo = 'Gesti√≥n de Calidad';

-- Progreso del Usuario 1 (varios m√≥dulos en diferentes estados)
INSERT INTO Instituto_ProgresoModulo (UserId, IdModulo, EstatusModuloUsuario, FechaInicio, FechaFinalizacion) VALUES
(@UserId1, @ModId1, 'Completado', '2025-01-15', '2025-01-20'),
(@UserId1, @ModId2, 'Completado', '2025-01-21', '2025-01-25'),
(@UserId1, @ModId3, 'En Progreso', '2025-01-26', NULL),
(@UserId1, @ModId4, 'Registrado', NULL, NULL);

-- Progreso del Usuario 2
INSERT INTO Instituto_ProgresoModulo (UserId, IdModulo, EstatusModuloUsuario, FechaInicio, FechaFinalizacion) VALUES
(@UserId2, @ModId1, 'Completado', '2025-02-01', '2025-02-05'),
(@UserId2, @ModId2, 'En Progreso', '2025-02-06', NULL);

-- Progreso del Usuario 3
INSERT INTO Instituto_ProgresoModulo (UserId, IdModulo, EstatusModuloUsuario, FechaInicio, FechaFinalizacion) VALUES
(@UserId3, @ModId1, 'Completado', '2025-02-10', '2025-02-15'),
(@UserId3, @ModId2, 'Completado', '2025-02-16', '2025-02-20'),
(@UserId3, @ModId3, 'Completado', '2025-02-21', '2025-02-25'),
(@UserId3, @ModId4, 'En Progreso', '2025-02-26', NULL);

PRINT 'Datos de prueba insertados correctamente';
"""

    print("\n" + "=" * 70)
    print("SCRIPT SQL PARA DATOS DE PRUEBA")
    print("=" * 70)
    print(script)

    # Guardar a archivo
    script_path = os.path.join(os.path.dirname(__file__), 'insert_test_data.sql')
    with open(script_path, 'w', encoding='utf-8') as f:
        f.write(script)

    print(f"\nüíæ Script guardado en: {script_path}")
    print("\nPara ejecutar:")
    print("  1. Abre SQL Server Management Studio")
    print("  2. Conecta a tu base de datos")
    print("  3. Abre y ejecuta el archivo insert_test_data.sql")


if __name__ == '__main__':
    print("\nüöÄ Iniciando verificaci√≥n de base de datos...\n")

    tiene_datos = verificar_estructura_bd()

    if not tiene_datos:
        print("\n" + "=" * 70)
        print("¬øDeseas generar el script de datos de prueba? (s/n): ", end='')
        respuesta = input().strip().lower()

        if respuesta in ['s', 'si', 'yes', 'y']:
            generar_script_datos_prueba()

    print("\n‚úÖ Verificaci√≥n completada\n")
